package com.javarush.test.level30.lesson08.task01;

/* Найдем число 2 в максимальной степени
Реализуйте логику метода maxPowerOf2,
который должен возвращать число 2 в максимальной степени, которое получается поместить в переданное число
Аргументом maxPowerOf2 может быть только положительное число
Используйте только операции: 1)побитовые сдвиги, 2) присваивание, 3) побитовое ИЛИ
Не оставляйте комментарии
*/
public class Solution {
    public static void main(String[] args) {
        System.out.println(maxPowerOf2(140_000));   //131072
        System.out.println(maxPowerOf2(1026));      //1024
        System.out.println(maxPowerOf2(17));        //16
    }

    public static int maxPowerOf2(int x) {
        x |= x >> 1;
        x |= x >> 2;
        x |= x >> 4;
        x |= x >> 8;
        x |= x >> 16;
        return x - (x >> 1);
    }
}
/*Алгоритмы поиска старшего бита
int bit2(int x) {
   x |= x >> 1;
   x |= x >> 2;
   x |= x >> 4;
   x |= x >> 8;
   x |= x >> 16;
   return x - (x >> 1);
}

Итак, пусть дано число х=000001bbbbb (я не следил за необходимым количеством бит в числе, b означает любой бит). Тогда
x          == 000001bbbbb
x >> 1     == 0000001bbbb
x | x >> 1 == 0000011bbbb
Таким образом, первое действие вслед за старшей единичкой, где бы она не оказалась, ставит следующую. Второе, как можно понять, ставит за этими двумя ещё две. Третее — ещё 4 (если есть, куда ставить). И так далее. Таким образом, в числе все биты после старшего оказываются единичными. Тогда понятно, что x — (x >> 1) выдаёт нам правильный ответ.


679 = Number{numerationSystem=_2, digit='1010100111'}
1010100111 x
0101010011 x >> 1
1111110111 x |= x >> 1;

1111110111 x
0011111101 x >> 2
1111111111 x |= x >> 2;
...

return x - (x >> 1);
1111111111 x
0111111111 x >> 1
1000000000 x - (x >> 1)*/