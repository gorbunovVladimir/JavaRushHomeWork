package com.javarush.test.level26.lesson02.task03;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

/* Убежденному убеждать других не трудно.
В таблице есть колонки, по которым можно сортировать.
Пользователь имеет возможность настроить под себя список колонок, которые будут сортироваться.
Напишите public static компаратор CustomizedComparator, который будет:
1. в конструкторе принимать список компараторов
2. сортировать данные в порядке, соответствующем последовательности компараторов.
Все переданные компараторы сортируют дженерик тип Т
В конструктор передается как минимум один компаратор
*/
public class Solution {
    public static class CustomizedComparator<T> implements Comparator<T>
    {
        ArrayList<Comparator<T>> comparators;
        public CustomizedComparator(Comparator<T>... comparators)
        {
            this.comparators = new ArrayList<>(comparators.length);
            Collections.addAll(this.comparators, comparators);
        }

        @Override
        public int compare(T o1, T o2)
        {
            int result = 0;

            for (int i = 0; i < this.comparators.size(); i++)
            {
                result = this.comparators.get(i).compare(o1, o2) ;
                if (result!=0) break;
            }
            return result;
        }
    }
}
/*алгоритм сравнения таков:
1) У нас имеется один или несколько компараторов (которые передаются в конструктор нашего мультикомпараторского класса CustomizedComparator =) допустим нам их передали аж три.
2) Внутри метода compare() перебираем в цикле переданные нам компараторы в той последовательности в которой они были нам переданы.
3) Внутри цикла сравниваем переданные в метод compare() (класса CustomizedComparator) объекты (T o1 и T o2) методом compare() первого из переданных компараторов.
4) Если результат сравнения != 0 (т.е. объекты различаются по критерию (колонке) первого из компараторов) то возвращаем результат их сравнения, и выходим тем самым из цикла и из метода. (остальные переданные компараторы нас в таком случае уже не интересуют!!! =))
5) Если же результат сравнения в первом компараторе == 0, то продолжаем в цикле дальше перебирать компараторы до тех пор пока или результат сравнения будет != 0, или не закончатся компараторы и цикл завершится (в этом случае возвращаем 0, это будет означать что объекты T o1 и T o2 по всем трём критериям (колонкам) равны).
*/