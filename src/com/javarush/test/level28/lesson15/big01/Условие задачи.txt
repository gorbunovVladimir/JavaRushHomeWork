****************************************************************
Задание 16

Мы молодец, большая работа позади! Теперь тебе легко будет мониторить вакансии для трудоустройства :)
Сейчас Aggregator использует только одну стратегию сбора вакансий - с ХэдХантера.

1. По аналогии с HHStrategy добавь стратегию для linkedin.
Назови класс LinkedInStrategy, реализуй метод getVacancies.

Вот тебе пример ссылки:
http://www.linkedin.com/vsearch/j?keywords=java+Dnepropetrovsk

Пример ссылки на вакансию:
http://www.linkedin.com/jobs2/view/15410035

2. В методе main создай провайдер для LinkedInStrategy. Передай этот провайдер в конструктор Model.
Это удобно сделать, т.к. модель принимает много провайдеров.
Остальную логику менять не нужно. Видишь, как легко расширять функционал?
От правильной архитектуры зависит многое.


****************************************************************
Задание 15

В классе HtmlView остался один пустой метод getUpdatedFileContent. В этом задании я опишу, что он должен делать.

1. В HtmlView создай protected метод Document getDocument() throws IOException, в котором
распарси файл vacancies.html используя Jsoup. Кодировка файла "UTF-8", используй поле filePath.

2. Получи элемент, у которого есть класс template.
Сделай копию этого объекта, удали из нее атрибут "style" и класс "template".
Используй этот элемент в качестве шаблона для добавления новой строки в таблицу вакансий.

3. Удали все добавленные ранее вакансии. У них единственный класс "vacancy".
В файле backup.html это одна вакансия - Junior Java Developer.
Нужно удалить все теги tr, у которых class="vacancy".
Но тег tr, у которого class="vacancy template", не удаляй.
Используй метод remove.

4. В цикле для каждой вакансии:
4.1. склонируй шаблон тега, полученного в п.2. Метод clone.
4.2. получи элемент, у которого есть класс "city". Запиши в него название города из вакансии.
4.3. получи элемент, у которого есть класс "companyName". Запиши в него название компании из вакансии.
4.4. получи элемент, у которого есть класс "salary". Запиши в него зарплату из вакансии.
4.5. получи элемент-ссылку с тегом a. Запиши в него название вакансии(title). Установи реальную ссылку на вакансию вместо href="url"
4.6. добавь outerHtml элемента, в который ты записывал данные вакансии,
непосредственно перед шаблоном <tr class="vacancy template" style="display: none">

5. Верни html код всего документа в качестве результата работы метода.

6. В случае возникновения исключения, выведи его стек-трейс и верни строку "Some exception occurred".

7. Запусти приложение, убедись, что все вакансии пишутся в файл vacancies.html
Для этого в HtmlView реализуй метод update.


****************************************************************
Задание 14

В классе HtmlView остались два пустых метода.
В этом задании я опишу, что должен делать метод updateFile. А также расскажу, как можно дебажить.

Он принимает тело файла в виде строки. Нужно его записать в файл, который находится по пути filePath.
Ты это хорошо умеешь делать, поэтому подробностей тут не будет.

Теперь - как дебажить.
Поставь брекпоинт, запусти в дебаг моде.
нажми Alt+F8 (Run -> Evaluate Expression)
В выражении (верхняя строка) напиши System.out.println("AAA") и нажми Alt+V (снизу кнопка Evaluate).
Перейди в окно консоли, там вывелось "AAA".

Используя это окно ты можешь смотреть текущие данные, заменять их на другие, нужные тебе.
Можешь выполнять все, что хочешь. Например, удалить все элементы мапы, изменить значение любой переменной,
 присвоить новое значение либо обнулить ее.
Поставь брекпоинт в Controller.onCitySelect, запусти в дебаг моде.
Остановились на этом брекпоинте? Отлично, жми Alt+F8, сверху в строке
cityName = "junior";
далее жми Alt+V и F9, чтобы продолжить работу приложения.
Список вакансий, который пришел в HtmlView.update, выполнялся для запроса "java junior".
Используй окно Expression Evaluation, думаю, оно тебе понадобится в следующем пункте.


****************************************************************
Задание 13

Смотри, в пакете view появились два новых файла:
 vacancies.html - будешь в него записывать данные
 backup.html - дубликат vacancies.html для восстановления, вдруг данные в vacancies.html сотрутся

Стань слева в дереве проекта на vacancies.html, нажми правой клавишой мыши, далее "Open in Browser".
Так будешь смотреть результат своего парсинга.

Пора заняться отображением вакансий.
1. В методе update класса HtmlView реализуй следующую логику:
1.1. сформируй новое тело файла vacancies.html, которое будет содержать вакансии
1.2. запиши в файл vacancies.html его обновленное тело
1.3. Все исключения должны обрабатываться в этом методе - выведи стек-трейс, если возникнет исключение.

2. Для реализации п.1 создай два пустых private метода:
String getUpdatedFileContent(List<Vacancy>), void updateFile(String)
Реализовывать их логику будем в следующих заданиях.

3. Чтобы добраться до файла vacancies.html, сформируй относительный путь к нему
В классе HtmlView создай приватное строковое final поле filePath, присвой ему относительный путь к vacancies.html.
Путь должен быть относительно корня проекта JavaRushHomeWork.
Формируй путь динамически используя this.getClass().getPackage() и разделитель "/"
Подсказка: путь должен начинаться с "./"


****************************************************************
Задание 12

Чтобы запустить приложение, нужно сэмулировать событие пользователя
1. В классе HtmlView создай публичный метод void userCitySelectEmulationMethod()
Пусть этот метод пробросит вызов в контроллер для города "Odessa".

2. Чтобы понять, что все работает, выведи что-то в консоль в методе update в HtmlView, например, количество вакансий.
Это будет флаг, что можно двигаться дальше.

3. Для запуска нужно еще обновить метод main в Aggregator.
3.1. Создай вью, модель, контроллер.
3.2. Засэть во вью контроллер.
3.3. Вызови у вью метод  userCitySelectEmulationMethod.

4. Запускай приложение! Подожди несколько секунд, чтобы выгреблись данные.
Работает? Отлично, что работает!


****************************************************************
Задание 11

В Model есть метод selectCity, в него передается название города, для которого выбираются вакансии.
Очевидно, что этот метод будет вызываться контроллером, т.к. он принимает решение, какую модель использовать.

1. Добавь в Controller новое поле Model model.

2. Удали метод scan() из Controller, его логика переместилась в модель.

3. Удали конструктор, toString и поле providers из контроллера.

4. Создай конструктор в Controller с аргументом Model.
На некорректные данные брось IllegalArgumentException

5. В Controller создай публичный метод void onCitySelect(String cityName), в котором вызови нужный метод модели.

6. Удали код из метода main. Этот код уже не валидный.


****************************************************************
Задание 10

У View есть метод update, в него передается список вакансий для отображения.
Очевидно, что этот метод будет вызываться моделью, т.к. только она получает данные.
Пришло время создать модель.

1. Создай класс Model в пакете model.

2. Добавь два поля - 1) вид, 2) массив провайдеров

3. Создай конструктор с двумя параметрами - 1) вид, 2) массив провайдеров
На невалидные данные кинь IllegalArgumentException

4. Создай публичный метод void selectCity(String city).

5. Реализуй логику метода selectCity:
5.1. получить вакансии с каждого провайдера
5.2. обновить вью списком вакансий из п.5.1.


****************************************************************
Задание 9

Пришло время чуток порефакторить код.
Почитай в инете про паттерн MVC(Model-View-Controller).
Кратко - используя View(вид) пользователь генерирует события, которые обрабатывает контроллер.
Контроллер принимает решение, какие данные ему нужны, и обращается к нужной моделе.
Модель получает данные, например, из БД или из URL-а. Потом модель передает данные во View.
View отображает данные.

1. Создай пакет view, в котором создай интерфейс View с двумя методами:
void update(List<Vacancy> vacancies);
void setController(Controller controller);

2. В пакете view создай класс HtmlView от View.

3. В классе HtmlView создай поле контроллер, используй его для реализации одного из методов интерфейса.


****************************************************************
Задание 8

Запусти снова программу в дебаг моде.
Скопируй полученное значение document.html() в созданный ранее html файл.
Отформатируй его и найди теги с вакансиями.

Почитай в Сообществе дополнительный материал к лекции про селекторы атрибута.

ВНИМАНИЕ: ОСОБЕННОСТИ ТЕСТИРОВАНИЯ!
HTML код странички ХэдХантера может меняться, чтобы эта задача продолжила работать стабильно не меняя тесты
воспользуйся закешированной версией http://javarush.ru/testdata/big28data.html
Это только для этого пункта, в следующих заданиях используй реальные страницы.

1. В классе HHStrategy создай protected метод Document getDocument(String searchString, int page) throws IOException.

2. Реализуй следующую логику метода getVacancies в классе HHStrategy:
2.1. Приконнекться к закешированной страничке ХэдХантера используя метод getDocument, нумерация начинается с 0.
2.2. Получи список элементов с атрибутом "vacancy-serp__vacancy". Должно быть до 20 вакансий на странице.
2.3. Если данные в списке из п.2.2. есть, то для каждого элемента:
2.3.1. создать вакансию и заполнить все ее данные, получив данные из текущего элемента.
Если тег с зарплатой присутствует, то заполнить и поле salary, иначе инициализировать поле пустой строкой.
2.4. Выполнить п.2.1-2.3 для следующей страницы ХэдХантера.
2.5. Если закончились страницы с вакансиями, то выйти из цикла.

Исключения игнорировать.
Все вакансии добавить в общий список и вернуть в качестве результата метода.

Подсказка по зарплате:
Поиграйся с URL_FORMAT, добавь туда еще один параметр, чтобы получить вакансии с зарплатами.
Проанализируй полученный html и найди тег для зарплаты.
Не забудь потом вернуть значение URL_FORMAT обратно.


****************************************************************
Задание 7
Чтобы Хэдхантер знал, кто к нему коннектится, проставим Request Headers в наш запрос.

Для разработчиков созданы инструменты, которые показывают различную информацию про запросы.
Я расскажу тебе про два инструмента.

***Chrome****
1. В браузере Хром пойди в Меню - Инструменты - Инструменты разработчика, или нажми Ctrl+Shift+I
2. В браузерной строке набери URL http://hh.ua/search/vacancy?text=java+киев
3. Перейди на табу Network(Сеть), запрашиваемый URL должен быть в самом верху.
У него метод отправки данных GET (еще есть POST), статус 200(успешно)
4. Выбери его, откроется информация о страничке.
5. Найди Request Headers(Заголовки запроса)

***FireFox***
1. Для FireFox есть плагин FireBug. Ставь FireBug (Меню - Дополнения - Поиск - FireBug, установить).
2. Правой клавишой мыши - Инспектировать элемент с помощью FireBug. Перейди на табу Net(Сеть), подменю HTML.
3. В браузерной строке набери URL http://hh.ua/search/vacancy?text=java+киев
4. В подменю HTML появился список запросов включая набранный в браузерной строке. Нажми на нем и зайди в меню "Заголовки"
5. Найди Request Headers(Заголовки запроса)

Добавь в коннекшен к урлу Хедхантера userAgent и referrer


****************************************************************
Задание 6

1. Слева в панеле Project найди снизу External Libraries. В jsoup найди пакет examples, посмотри классы в этом пакете.

2. По аналогии с реализацией в примерах кода jsoup - реализуй коннекшен к урлу ХэдХантера методом GET.
Это нужно сделать в методе getVacancies класса HHStrategy.
Подсказка: получится объект класса Document.

3. Поставь брекпоинт сразу после коннекшена. Запусти программу в дебаг моде.
Скопируй полученное значение document.html() в буффер.

4. Создай файл с расширением html где-то в корне JavaRushHomeWork.
Вставь содержимое буффера в этот файл и отформатируй его Ctrl+Alt+L, IDEA умеет форматировать HTML.
Ура! Это код страницы HTML :)

5. Реализуй в вакансии (Vacancy) методы equals/hashCode
Alt+Enter - equals() and hashCode()


****************************************************************
Задание 5

1. Добавь в интерфейс метод getVacancies(String searchString), который будет возвращать список вакансий.

2. Поправь ошибки в классе HHStrategy.

3. Вернись в метод getJavaVacancies класса Provider, реализуй его логику из расчета, что всех данных хватает.

4. Давай попробуем запустить и посмотреть, как работает наша программа.
В методе main вместо вывода на экран напиши controller.scan();
Воспользуйся подскайкой IDEA и создай метод.
Внутри метода пройдись по всем провайдерам и собери с них все вакансии, добавь их в список. Выведи количество вакансий в консоль.

5. Исправь NPE, если появляется это исключение (поставь заглушку).


****************************************************************
Задание 4

Открой сайт ХэдХантер - http://hh.ua/ или http://hh.ru/
В стороке поиска набери "java Киев", снизу перейди на вторую страницу, т.к. урлы часто отличаются на первой странице и далее.
У меня получилась такая ссылка:
http://hh.ua/search/vacancy?text=java+Киев&page=1
Из этого следует, что
1) если тебе нужно будет фильтровать по городу, то ты добавишь его после слова java, разделив их знаком +
2) нумерация страниц начинается с 0

Итак, ссылка будет примерно такой:
http://hh.ua/search/vacancy?text=java+ADDITIONAL_VALUE&page=PAGE_VALUE

1. Из полученной ссылки в HHStrategy создай приватную строковую константу URL_FORMAT, которая будет передаваться в String.format
 String.format(URL_FORMAT, "Kiev", 3) должно равняться
 "http://hh.ua/search/vacancy?text=java+Kiev&page=3"
 или
 "http://hh.ru/search/vacancy?text=java+Kiev&page=3"
Для этого скопируйте ссылку в код и нажмите на ней нужную комбинацию клавиш.
Ctrl+Alt+C(Constant) - создание констант
Ctrl+Alt+M(Method) - создание методов
Ctrl+Alt+V(Variable) - создание переменных

2. Тебе нужно программно получить исходный код страницы. Это HTTP запрос. Тебе понадобится Java HTML Parser.
Хороший парсер jsoup, будешь использовать его.
Найди сайт jsoup - Java HTML Parser, скачай с него либу и ее сырцы(sources). Класть их внутрь проекта не нужно!

3. Подключи новые либы:
В IDEA открой Project Structure (в меню File)
Слева выбери Project Settings -> Libraries, в окошке справа сверху нажми "+".
Выбери "Java", если либы еще не нет, либо "Attach Files or Directories", чтоб добавить джарники к существующей либе.
В диалоговом окне открой путь к папке из п.2, открой саму папку и выбери все либы - *.jar файлы.

4. Прочитай дополнительный материал к лекции в Сообществе.


****************************************************************
Задание 3

Начиная с этого задании ты начнешь писать логику получения данных с сайта.
Эта логика будет полностью сосредоточена в классах, реализующих Strategy.

Провайдер в данном случае выступает в качестве контекста, если мы говорим о паттерне Стратегия.
В провайдере должен быть метод, который будет вызывать метод стратегии для выполнения главной операции.
Этот метод будет возвращать все java вакансии с выбранного сайта (ресурса).

1. В корне задачи создай пакет vo (value object), в котором создай класс Vacancy.
Этот класс будет хранить данные о вакансии.

2. В Provider создай метод List<Vacancy> getJavaVacancies(String searchString). Оставь пока метод пустым.

3. Что есть у вакансии?
Название, зарплата, город, название компании, название сайта, на котором вакансия найдена, ссылка на вакансию.
В классе Vacancy создай соответствующие строковые поля: title, salary, city, companyName, siteName, url.

4. Создай геттеры и сеттеры для всех полей класса Vacancy.

5. В пакете model создай класс HHStrategy от Strategy.
Этот класс будет реализовывать конкретную стратегию работы с сайтом ХэдХантер (http://hh.ua/ и http://hh.ru/).


****************************************************************
Задание 2

1. Создай класс Controller, в нем будет содержаться бизнес логика.

2. В Controller добавь паблик конструктор, который будет принимать столько провайдеров, сколько в него передадут для обработки.
Сохрани их в приватное поле providers.
Помнишь, как это делать? Нужно нажать на аргументе конструктора Alt+Enter, выбрать Create Field for Parameter 'providers'

3. Если провайдеры не переданы в конструктор контроллера, то брось IllegalArgumentException.

4. Создай метод toString в классе Controller (Alt+Insert -> toString()) со стандартной реализацией (должен выводить поле providers)

5. В методе main создай провайдер, а потом создай контроллер с этим провайдером.

6. В методе main выведи в консоль созданный экземпляр Controller-а.


****************************************************************
Задание 1 - Aggregator

Пришло время немного поработать с информацией в инете. В этом задании ты будешь писать агрегатор java вакансий.
Что у нас должно быть?
Должен быть список сайтов, на которых мы ищем вакансии
Для начала возьмем http://hh.ua/ и http://hh.ru/, потом уже добавим другие сайты поиска работы.
Это один и тот же сайт, только в разных доменах.

С чего же нужно начать реализацию? Конечно же с метода main :)
1. Создай класс Aggregator с методом main

2. Создай пакет model, в нем создай класс Provider.
Этот класс будет обобщать способ получения данных о вакансиях.

3. Т.к. для каждого сайта будет выполняться одинаковый сценарий, то будет паттерн Стратегия. Почитай про него в инете на вики.
В пакете model создай интерфейс Strategy.
Он будет отвечать за получение данных с сайта.

4. В класс Provider добавь поле Strategy strategy. Добавь конструктор с этим полем и сеттер.